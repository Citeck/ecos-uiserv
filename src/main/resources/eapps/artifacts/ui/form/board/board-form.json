{
  "id": "board-form",
  "formKey": "",
  "title": {
    "en": "Kanban board config"
  },
  "description": {},
  "customModule": "",
  "typeRef": "",
  "width": "lg",
  "system": true,
  "i18n": {},
  "definition": {
    "components": [
      {
        "label": {
          "ru": "Columns"
        },
        "columns": [
          {
            "components": [
              {
                "label": {
                  "ru": "Идентификатор доски",
                  "en": "Kanban ID"
                },
                "key": "id",
                "protected": true,
                "defaultValue": "",
                "refreshOn": [],
                "optionalWhenDisabled": false,
                "customConditional": "\n",
                "logic": [
                  {
                    "name": "Disable",
                    "trigger": {
                      "type": "javascript",
                      "javascript": "result = _.get(instance, 'options.formMode') !== 'CREATE';"
                    },
                    "actions": [
                      {
                        "name": "Disable field",
                        "type": "property",
                        "property": {
                          "label": "Disabled",
                          "value": "disabled",
                          "type": "boolean"
                        },
                        "state": "true"
                      }
                    ]
                  }
                ],
                "type": "textfield",
                "input": true
              },
              {
                "label": {
                  "en": "Kanban board name",
                  "ru": "Имя канбан-доски"
                },
                "key": "name",
                "validate": {
                  "required": true
                },
                "defaultValue": {
                  "ru": "Доска ",
                  "en": "Board "
                },
                "refreshOn": [],
                "optionalWhenDisabled": false,
                "type": "mlText",
                "input": true
              },
              {
                "label": {
                  "ru": "Возможно ли перемещать сущности между статусами",
                  "en": "Is it possible to move entities between states"
                },
                "key": "canDrag",
                "persistent": false,
                "refreshOn": [
                  "recordAsyncData"
                ],
                "calculateValue": "const readOnly = _.get(data, 'recordAsyncData._readOnly');\n\nif (!_.isNil(readOnly)) {\n  value = !Boolean(readOnly);\n}\n",
                "allowCalculateOverride": true,
                "optionalWhenDisabled": false,
                "type": "checkbox",
                "input": true
              },
              {
                "label" : {
                  "ru" : "Скрыть заголовок",
                  "en" : "Hide the title"
                },
                "key" : "disableTitle",
                "refreshOn" : [ ],
                "optionalWhenDisabled" : false,
                "type" : "checkbox",
                "input" : true
              },
              {
                "key": "readOnly",
                "refreshOn": [
                  "canDrag"
                ],
                "calculateValue": "value = !_.get(data, 'canDrag');",
                "optionalWhenDisabled": false,
                "type": "hidden",
                "input": true
              }
            ],
            "type": "column",
            "input": false,
            "key": "column",
            "index": 0
          },
          {
            "index": 1,
            "type": "column",
            "input": false,
            "key": "column",
            "components": [
              {
                "label": {
                  "ru": "Тип данных",
                  "en": "Data type"
                },
                "key": "typeRef",
                "validate": {
                  "required": true
                },
                "modalTitle": "",
                "journalId": "ecos-types",
                "queryData": "",
                "refreshOn": [],
                "calculateValue": "const formMode = _.get(instance, 'options.formMode');\n\nvalue = formMode === 'CREATE' ? '' : _.get(data, 'recordAsyncData.typeRef')\n",
                "allowCalculateOverride": true,
                "optionalWhenDisabled": false,
                "type": "selectJournal",
                "input": true
              },
              {
                "label": {
                  "ru": "Журнал",
                  "en": "Journal"
                },
                "key": "journalRef",
                "journalId": "ecos-journals",
                "refreshOn": [],
                "type": "selectJournal",
                "input": true,
                "queryData": ""
              },
              {
                "label": {
                  "ru": "Форма",
                  "en": "Form"
                },
                "key": "cardFormRef",
                "journalId": "ecos-forms",
                "refreshOn": [],
                "type": "selectJournal",
                "input": true,
                "queryData": ""
              },
              {
                "label": {
                  "ru": "Действия",
                  "en": "Actions"
                },
                "multiple": true,
                "key": "actions",
                "reorder": false,
                "journalId": "ui-actions",
                "defaultValue": [],
                "refreshOn": [],
                "type": "selectJournal",
                "input": true
              }
            ]
          }
        ],
        "key": "columns4",
        "type": "columns",
        "input": false
      },
      {
        "label": {
          "ru": "Колонки",
          "en": "Columns"
        },
        "key": "columns",
        "multiple": true,
        "validate": {
          "minLength": "",
          "maxLength": ""
        },
        "disableAddingRemovingRows": false,
        "addAnother": "",
        "addAnotherPosition": "bottom",
        "removePlacement": "col",
        "defaultOpen": false,
        "layoutFixed": false,
        "enableRowGroups": false,
        "reorder": true,
        "defaultValue": [
          {
            "name": {
              "ru": ""
            },
            "type": "",
            "id": "",
            "submit4": false,
            "computed": [
              null
            ],
            "status": "",
            "objectObject2": {
              "ru": "",
              "en": ""
            }
          }
        ],
        "refreshOn": [],
        "type": "datagrid",
        "input": true,
        "components": [
          {
            "label": {
              "ru": "Статус",
              "en": "Status"
            },
            "key": "panel",
            "refreshOn": [],
            "optionalWhenDisabled": false,
            "type": "panel",
            "input": false,
            "components": [
              {
                "label": {
                  "en": "Data type",
                  "ru": "Статус"
                },
                "key": "id",
                "hideLabel": true,
                "customClass": "mt-n3 pt-1",
                "dataSrc": "custom",
                "data": {
                  "custom": "let statuses = _.get(data, 'typeRef') ? _.get(data, 'statusesAsyncData.values', []) : [];\n\nif (_.get(instance, 'options.formMode') === 'CREATE') {\n  let statusesFromOptions = _.get(instance, 'options.statuses', []);\n  if (statusesFromOptions && statusesFromOptions.length) {\n    statuses = statusesFromOptions;\n  }\n}\nstatuses = [...(statuses || [])];\nstatuses.unshift({id: \"EMPTY\", name: {ru: \"Пустой статус\", en: \"Empty status\"}});\n\n\nvalues = statuses.map(item => ({\n  label: item.name || item.id,\n  value: item.id\n}));"
                },
                "dataPreProcessingCode": "",
                "valueProperty": "value",
                "unavailableItems": {
                  "isActive": true,
                  "code": "value = _.get(data, 'columns', []).map(column => column.id);"
                },
                "defaultValue": "",
                "refreshOn": [
                  "statusesAsyncData"
                ],
                "optionalWhenDisabled": false,
                "type": "select",
                "input": true
              }
            ],
            "row": "0-0"
          },
          {
            "label": {
              "ru": "Имя",
              "en": "Name"
            },
            "key": "name",
            "refreshOn": [],
            "calculateValue": "const { name } = row || {};\nlet statuses = _.get(data, 'typeRef') ? _.get(data, 'statusesAsyncData.values', []) : [];\n\nif (_.get(instance, 'options.formMode') === 'CREATE') {\n  let statusesFromOptions = _.get(instance, 'options.statuses', []);\n  \n  if (statusesFromOptions && statusesFromOptions.length) {\n    statuses = statusesFromOptions;\n  }\n}\n\nconst selectedStatus = (statuses || []).find(item => item.id === row.id);\nconst statusMlName = _.get(selectedStatus, 'mlName') || {};\nconst result = {\n  ...(_.isObject(name) ? name : {}),\n  ...statusMlName\n};\n\nif (_.isEmpty(statusMlName)) {\n  result[utils.getCurrentLocale()] = row.id;\n}\n\nvalue = { ...result };",
            "allowCalculateOverride": true,
            "optionalWhenDisabled": false,
            "type": "mlText",
            "input": true,
            "row": "0-1"
          },
          {
            "label": {
              "ru": "Настройки",
              "en": "Settings"
            },
            "key": "columns3",
            "columns": [
              {
                "components": [
                  {
                    "label": {
                      "ru": "Настройки",
                      "en": "Settings"
                    },
                    "key": "submit2",
                    "action": "custom",
                    "state": "",
                    "showValidations": false,
                    "custom": "var currentRow = row;\nvar config = row || {}; \nvar formData = config;\n\nCiteck.EcosFormUtils.getFormById('board-column-settings-form', {\n    definition: 'definition?json'\n}).then(function(formConfig) {\n    \n    var inputs = Citeck.EcosFormUtils.getFormInputs(formConfig.definition);\n\n    Citeck.Dialogs.showFormDialog({\n        title: { ru: \"Настройки колонки\", en: \"Column settings\" },\n        showDefaultButtons: true,\n        formDefinition: formConfig.definition,\n        formData: formData,\n        onSubmit: submission => {\n            var data = submission.data || {};\n            var configData = {};\n            for (var i in inputs) {\n                var att = inputs[i].attribute;\n                if (att === \"hideItemsOlderThan\") {\n                  var duration = moment.duration(data[att], 'days');\n                  var isoString = duration.toISOString();\n                  currentRow[att] = isoString;\n                } else {\n                  currentRow[att] = data[att];\n                }\n            }\n        }\n    })\n    \n});",
                    "block": true,
                    "refreshOn": [],
                    "optionalWhenDisabled": false,
                    "type": "button",
                    "input": true,
                    "headers": [
                      {}
                    ]
                  },
                  {
                    "key": "_statusModified",
                    "refreshOn": [
                      "data"
                    ],
                    "optionalWhenDisabled": false,
                    "properties": {
                      "_statusModified": "value"
                    },
                    "type": "hidden",
                    "input": true
                  }
                ],
                "type": "column",
                "input": false,
                "key": "column",
                "index": 0,
                "md": 20
              }
            ],
            "oneColumnInViewMode": false,
            "type": "columns",
            "input": false,
            "row": "0-2"
          }
        ]
      },
      {
        "label": {
          "ru": "Columns"
        },
        "hidden": true,
        "key": "objectObject",
        "columns": [
          {
            "components": [
              {
                "source": {
                  "type": "record",
                  "record": {
                    "id": "{{ recordId }}",
                    "attributes": {
                      "typeRef": "typeRef?id",
                      "_readOnly": "readOnly?bool"
                    }
                  },
                  "forceLoad": false
                },
                "update": {
                  "type": "once"
                },
                "executionCondition": "value = _.get(instance, 'options.formMode') === 'EDIT';\n",
                "key": "recordAsyncData",
                "type": "asyncData",
                "input": true
              },
              {
                "label": "Statuses Async Data",
                "source": {
                  "type": "recordsScript",
                  "recordsScript": {
                    "script": "value = _.get(data, 'typeRef');",
                    "attributes": {
                      "values": "model.statuses{id,name,mlName:name?json}[]"
                    }
                  },
                  "forceLoad": false
                },
                "update": {
                  "type": "any-change"
                },
                "refreshOn": [
                  {
                    "label": "typeRef",
                    "value": "typeRef"
                  }
                ],
                "key": "statusesAsyncData",
                "type": "asyncData",
                "input": true
              }
            ],
            "type": "column",
            "input": false,
            "key": "column",
            "index": 0
          },
          {
            "type": "column",
            "input": false,
            "key": "column",
            "index": 1,
            "components": []
          }
        ],
        "type": "columns",
        "input": false
      },
      {
        "label": {
          "ru": "Actions"
        },
        "columns": [
          {
            "components": [],
            "md": 3,
            "type": "column",
            "input": false,
            "key": "column",
            "index": 0
          },
          {
            "md": 3,
            "type": "column",
            "input": false,
            "key": "column",
            "index": 1,
            "components": []
          },
          {
            "md": 3,
            "type": "column",
            "input": false,
            "key": "column",
            "index": 2,
            "components": [
              {
                "label": {
                  "ru": "Отменить",
                  "en": "Cancel"
                },
                "action": "event",
                "state": "",
                "showValidations": false,
                "event": "cancel",
                "block": true,
                "key": "submit3",
                "type": "button",
                "input": true
              }
            ]
          },
          {
            "md": 3,
            "type": "column",
            "input": false,
            "key": "column",
            "index": 3,
            "components": [
              {
                "label": {
                  "ru": "Сохранить",
                  "en": "Save"
                },
                "state": "",
                "theme": "primary",
                "block": true,
                "disableOnInvalid": true,
                "key": "submit",
                "type": "button",
                "input": true
              }
            ]
          }
        ],
        "key": "columns2",
        "type": "columns",
        "input": false
      }
    ]
  },
  "attributes": {},
  "notExists": false
}
